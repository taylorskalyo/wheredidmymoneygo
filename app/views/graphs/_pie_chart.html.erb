<%= stylesheet_link_tag    'graphs', media: 'all', 'data-turbolinks-track' => true %>

<svg class="pie_chart"></svg>

<script>
var width = 400, 
    height = 200, 
    radius = Math.min(width, height) / 2 - 10;

var color = d3.scale.category20();

var pie = d3.layout.pie()
  .value(function(d) { return d.amount; })
  .sort(null);

var arc = d3.svg.arc()
  .outerRadius(radius * 0.9)
  .innerRadius(0);

var outerArc = d3.svg.arc()
  .innerRadius(radius)
  .outerRadius(radius);

var data = <%= raw Expense.group(:category).sum(:amount).map{|e| {
  :amount => e[1], 
  :category => e[0]
}}.to_json %>;

var preview = false;

// data = [];

if (data.length == 0) {
  preview = true;
  data = [
    {amount:165.34, category:"Groceries"},
    {amount:49.12, category:"Gas"},
    {amount:10.07, category:"Other"}
  ]
}

var svg = d3.select(".pie_chart")
  .attr("width", width)
  .attr("height", height)
  .append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var path = svg.datum(data).selectAll("path")
    .data(pie)
  .enter().append("path")
    .attr("fill", function(d, i) { return color(i); })
    .attr("d", arc);

function midAngle(d){
  return d.startAngle + (d.endAngle - d.startAngle)/2;
}

var text = svg.datum(data).selectAll("text")
  .data(pie(data))
  .enter()
  .append("text")
    .attr("dy", ".35em")
    .text(function(d) {
      return d.data.category;
    });

text.transition()
    .attrTween("transform", function(d) {
      this._current = this._current || d;
      var interpolate = d3.interpolate(this._current, d);
      this._current = interpolate(0);
      return function(t) {
        var d2 = interpolate(t);
        var pos = outerArc.centroid(d2);
        pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
        return "translate("+ pos +")";
      };
    })
    .styleTween("text-anchor", function(d){
      this._current = this._current || d;
      var interpolate = d3.interpolate(this._current, d);
      this._current = interpolate(0);
      return function(t) {
        var d2 = interpolate(t);
        return midAngle(d2) < Math.PI ? "start":"end";
      };
    });


var polyline = svg.datum(data).selectAll("polyline")
    .data(pie(data));

  polyline.enter()
    .append("polyline");

  polyline.transition()
    .attrTween("points", function(d){
      this._current = this._current || d;
      var interpolate = d3.interpolate(this._current, d);
      this._current = interpolate(0);
      return function(t) {
        var d2 = interpolate(t);
        var pos = outerArc.centroid(d2);
        pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
        return [arc.centroid(d2), outerArc.centroid(d2), pos];
      };
    });

if (preview) {
  svg.append("rect")
    .attr("x", -width / 2)
    .attr("y", -height / 2)
    .attr("width", width)
    .attr("height", height)
    .attr("fill", "white")
    .attr("opacity", 0.75);

  svg.append("text")
    .text("Preview")
    .style("text-anchor", "middle");
}

</script>

